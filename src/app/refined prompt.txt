import React, { FC, useState } from "react";
import { icons } from "./icons";
import { useDrag } from "@use-gesture/react";

interface Team {
  rank: number;
  name: string;
  tier: string;
  color: string;
  icon: keyof typeof icons;
}

const teams: Team[] = [
  { rank: 1, name: "Team Name", tier: "Diamond Tier", color: "custom-yellow", icon: "diamond" },
  { rank: 2, name: "Team Name", tier: "Diamond Tier", color: "custom-blue", icon: "diamond" },
  { rank: 3, name: "Team Name", tier: "Diamond Tier", color: "custom-green", icon: "diamond" },
  { rank: 4, name: "Team Name", tier: "Diamond Tier", color: "custom-orange", icon: "diamond" },
  { rank: 5, name: "Team Name", tier: "Diamond Tier", color: "custom-yellow", icon: "diamond" },
  { rank: 6, name: "Team Name", tier: "Diamond Tier", color: "custom-blue", icon: "diamond" },
  { rank: 7, name: "Team Name", tier: "Diamond Tier", color: "custom-green", icon: "diamond" },
  { rank: 8, name: "Team Name", tier: "Diamond Tier", color: "custom-orange", icon: "diamond" },
  { rank: 9, name: "Team Name", tier: "Diamond Tier", color: "custom-yellow", icon: "diamond" },
  { rank: 10, name: "Your Team Name", tier: "Silver Tier", color: "custom-blue", icon: "silver" },
];

const Leaderboard: FC = () => {
  const [isExpanded, setIsExpanded] = useState(false); // Expanded state
  const [offset, setOffset] = useState(0); // Track swipe offset
  
  // Gesture handler for swipe-up/down
  const bind = useDrag(
    ({ movement: [, my], memo = offset, direction: [, yDir], distance: [, yDist], last }) => {
      const threshold = 50;
      const newYPos = memo + my;

      // Only allow dragging if it's not fully expanded or collapsed
      if (newYPos > -500 && newYPos < 0) {
        setOffset(newYPos);
      }

      if (last && yDist > threshold) {
        setIsExpanded(yDir < 0); // Swipe up expands, swipe down collapses
        setOffset(yDir < 0 ? 0 : -500); // Snap to full expanded or collapsed position
      }
      return memo;
    },
    { axis: "y" }
  );

  return (
    <div className="min-h-screen bg-gray-900 text-white">
      <header className="flex items-center justify-between p-4 bg-gray-800">
        <h1 className="text-xl font-bold">Leaderboard</h1>
      </header>

      <main
        {...bind()} // Apply the gesture handler here
        style={{ transform: `translateY(${isExpanded ? 0 : 500}px)` }} // Position based on swipe
        className={`transition-transform duration-500 ease-in-out fixed bottom-0 left-0 w-full bg-gray-800 rounded-t-lg ${isExpanded ? "h-[50%]" : "h-[10%]"}`} // Adjust based on expanded state
      >
        {teams.map((team) => (
          <div
            key={team.rank}
            className={`flex items-center text-black justify-between p-4 mb-2 rounded-lg ${team.color}`}
          >
            <div className="flex items-center">
              <span className="text-7xl font-bold text-black mr-4">{team.rank}</span>
              <div>
                <div className="text-3xl text-black font-semibold">{team.name}</div>
                <div className="text-sm">{team.tier}</div>
              </div>
            </div>
            <div className="text-4xl">
              <img src={icons[team.icon]} alt={team.icon} className="w-10 h-10" />
            </div>
          </div>
        ))}
      </main>
    </div>
  );
};

export default Leaderboard;




/* globals.css */
html, body {
  height: 100%;
  overflow-x: hidden; /* Prevent horizontal scrolling */
}

main {
  position: fixed; /* Ensure the leaderboard stays in position */
  bottom: 0;
  width: 100%;
  background-color: #1a1a1a;
  border-radius: 15px 15px 0 0; /* Rounded top corners for mobile look */
  z-index: 100; /* Ensure it's above other content */
}

.custom-yellow { background-color: #f9e79f; }
.custom-blue { background-color: #85c1e9; }
.custom-green { background-color: #82e0aa; }
.custom-orange { background-color: #f7b04d; }

/* Animation-related CSS */
.transition-transform {
  transition: transform 0.5s ease-in-out;
}

body {
  -webkit-overflow-scrolling: touch; /* Enable smooth scrolling on mobile */
}